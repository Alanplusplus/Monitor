package com.monitor.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.monitor.greendao.SmsEntity;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "SMS_ENTITY".
*/
public class SmsEntityDao extends AbstractDao<SmsEntity, Long> {

    public static final String TABLENAME = "SMS_ENTITY";

    /**
     * Properties of entity SmsEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, String.class, "id", false, "ID");
        public final static Property Address = new Property(1, String.class, "address", false, "ADDRESS");
        public final static Property Person = new Property(2, String.class, "person", false, "PERSON");
        public final static Property Date = new Property(3, Long.class, "date", true, "DATE");
        public final static Property Body = new Property(4, String.class, "body", false, "BODY");
        public final static Property Type = new Property(5, Integer.class, "type", false, "TYPE");
        public final static Property RetryCount = new Property(6, Integer.class, "retryCount", false, "RETRY_COUNT");
    };


    public SmsEntityDao(DaoConfig config) {
        super(config);
    }
    
    public SmsEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SMS_ENTITY\" (" + //
                "\"ID\" TEXT," + // 0: id
                "\"ADDRESS\" TEXT," + // 1: address
                "\"PERSON\" TEXT," + // 2: person
                "\"DATE\" INTEGER PRIMARY KEY UNIQUE ," + // 3: date
                "\"BODY\" TEXT NOT NULL ," + // 4: body
                "\"TYPE\" INTEGER," + // 5: type
                "\"RETRY_COUNT\" INTEGER);"); // 6: retryCount
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SMS_ENTITY\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, SmsEntity entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        String address = entity.getAddress();
        if (address != null) {
            stmt.bindString(2, address);
        }
 
        String person = entity.getPerson();
        if (person != null) {
            stmt.bindString(3, person);
        }
 
        Long date = entity.getDate();
        if (date != null) {
            stmt.bindLong(4, date);
        }
        stmt.bindString(5, entity.getBody());
 
        Integer type = entity.getType();
        if (type != null) {
            stmt.bindLong(6, type);
        }
 
        Integer retryCount = entity.getRetryCount();
        if (retryCount != null) {
            stmt.bindLong(7, retryCount);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3);
    }    

    /** @inheritdoc */
    @Override
    public SmsEntity readEntity(Cursor cursor, int offset) {
        SmsEntity entity = new SmsEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // address
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // person
            cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3), // date
            cursor.getString(offset + 4), // body
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // type
            cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6) // retryCount
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, SmsEntity entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setAddress(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setPerson(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setDate(cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3));
        entity.setBody(cursor.getString(offset + 4));
        entity.setType(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setRetryCount(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(SmsEntity entity, long rowId) {
        entity.setDate(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(SmsEntity entity) {
        if(entity != null) {
            return entity.getDate();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
